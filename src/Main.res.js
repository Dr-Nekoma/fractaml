// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Browser from "./Browser.res.js";
import * as Complex from "rescript/lib/es6/complex.js";
import * as Caml_int32 from "rescript/lib/es6/caml_int32.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.res.js";

var centerX = {
  contents: 0.0
};

var centerY = {
  contents: 0.0
};

var scale = {
  contents: 1.0
};

var colorAdjusts = [
  50.0,
  100.0,
  150.0,
  200.0,
  250.0,
  300.0,
  350.0,
  400.0
];

function calculateConvergence(c) {
  var _z = {
    re: 0.0,
    im: 0.0
  };
  var _counter = 0;
  var _withinBoundaries = true;
  while(true) {
    var withinBoundaries = _withinBoundaries;
    var counter = _counter;
    var z = _z;
    if (!(counter < 100 && withinBoundaries)) {
      return [
              counter,
              withinBoundaries
            ];
    }
    var zSquare = Complex.mul(z, z);
    var newZ = Complex.add(zSquare, c);
    var newCounter = counter + 1 | 0;
    var newWithinBoundaries = Complex.norm(newZ) > 2.0 ? false : withinBoundaries;
    _withinBoundaries = newWithinBoundaries;
    _counter = newCounter;
    _z = newZ;
    continue ;
  };
}

function colorGenerator(counter) {
  var magicalValue = Math.sqrt(counter / 100) * 200.0;
  var adjust = colorAdjusts[Caml_int32.mod_(magicalValue | 0, colorAdjusts.length)];
  return (adjust - magicalValue | 0) % 255;
}

function getColor(param) {
  if (param[1]) {
    return [
            0,
            0,
            0
          ];
  }
  var counter = param[0];
  if (counter <= 1) {
    return [
            100,
            100,
            100
          ];
  }
  var randomColor = function (value) {
    return colorGenerator(counter - value | 0);
  };
  return [
          randomColor(5),
          randomColor(80),
          randomColor(100)
        ];
}

function draw(context) {
  for(var row = 0; row <= 959; ++row){
    for(var col = 0; col <= 959; ++col){
      var real = (row - 960 / 2.0) * (2.0 * 2.0 / 960) * scale.contents + centerX.contents;
      var imaginary = (col - 960 / 2.0) * (2.0 * 2.0 / 960) * scale.contents + centerY.contents;
      var c = {
        re: real,
        im: imaginary
      };
      var value = calculateConvergence(c);
      var colors = getColor(value);
      context.fillStyle = "rgb(" + colors[0].toString() + "," + colors[1].toString() + "," + colors[2].toString() + ")";
      context.fillRect(row, col, 1.0, 1.0);
    }
  }
}

Core__Option.forEach(Core__Option.flatMap(Caml_option.nullable_to_opt(document.querySelector("canvas")), Browser.Canvas.fromElement), (function (canvas) {
        canvas.width = 960;
        canvas.height = 960;
        Core__Option.forEach(Caml_option.nullable_to_opt(canvas.getContext("2d")), draw);
      }));

var Canvas;

var bounds = 2.0;

var maxIterations = 100;

var canvasWidth = 960;

var canvasHeight = 960;

export {
  Canvas ,
  bounds ,
  maxIterations ,
  canvasWidth ,
  canvasHeight ,
  centerX ,
  centerY ,
  scale ,
  colorAdjusts ,
  calculateConvergence ,
  colorGenerator ,
  getColor ,
  draw ,
}
/*  Not a pure module */
